#include "U8glib.h"
char comchar;
int i;
U8GLIB_NHD27OLED_2X_BW u8g(13, 11, 10, 9); // SPI Com: SCK =DB0 = 13, MOSI =DB1 = 11, CS = 10, A0  = DC= 9
const uint8_t rook_bitmap_lan[] PROGMEM = {
0x08,0x20,0x08,0x20,0xFF,0xFE,0x08,0x20,
0x04,0x80,0x24,0x80,0x24,0xFC,0x24,0xA0,
0x25,0x10,0x00,0x00,0x3F,0xF8,0x24,0x48,
0x24,0x48,0x24,0x48,0xFF,0xFE,0x00,0x00,/*"蓝",0*/
};
const uint8_t rook_bitmap_ya[] PROGMEM = {
0x00,0x00,0x3F,0xFC,0x00,0x40,0x00,0x40,
0x10,0x40,0x10,0x40,0x20,0x40,0x3F,0xFE,
0x01,0x40,0x02,0x40,0x04,0x40,0x08,0x40,
0x10,0x40,0x60,0x40,0x01,0x40,0x00,0x80,/*"牙",1*/
};
const uint8_t rook_bitmap_lian[] PROGMEM = {
0x00,0x40,0x20,0x40,0x17,0xFE,0x10,0x80,
0x00,0xA0,0x01,0x20,0xF3,0xFC,0x10,0x20,
0x10,0x20,0x10,0x20,0x17,0xFE,0x10,0x20,
0x10,0x20,0x28,0x20,0x47,0xFE,0x00,0x00,/*"连",2*/
};
const uint8_t rook_bitmap_jie[] PROGMEM = {
0x10,0x80,0x10,0x40,0x13,0xFC,0x10,0x00,
0xFD,0x08,0x10,0x90,0x17,0xFE,0x10,0x40,
0x18,0x40,0x37,0xFE,0xD0,0x88,0x11,0x08,
0x10,0x90,0x10,0x60,0x51,0x98,0x26,0x04,/*"接",3*/
};
const uint8_t rook_bitmap_zhong[] PROGMEM = {
0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,
0x3F,0xF8,0x21,0x08,0x21,0x08,0x21,0x08,
0x21,0x08,0x21,0x08,0x3F,0xF8,0x21,0x08,
0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,/*"中",4*/
};
const uint8_t rook_bitmap_douhao[] PROGMEM = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x30,0x00,0x30,0x00,0x10,0x00,0x20,0x00,/*"，",5*/
};
const uint8_t rook_bitmap_qing[] PROGMEM = {
0x00,0x40,0x40,0x40,0x27,0xFC,0x20,0x40,
0x03,0xF8,0x00,0x40,0xE7,0xFE,0x20,0x00,
0x23,0xF8,0x22,0x08,0x23,0xF8,0x22,0x08,
0x2B,0xF8,0x32,0x08,0x22,0x28,0x02,0x10,/*"请",0*/
};
const uint8_t rook_bitmap_shao[] PROGMEM = {
0x08,0x20,0x1D,0x24,0xF0,0xA4,0x10,0xA8,
0x10,0x20,0xFD,0xFC,0x11,0x04,0x31,0x04,
0x39,0xFC,0x55,0x04,0x55,0x04,0x91,0xFC,
0x11,0x04,0x11,0x04,0x11,0x14,0x11,0x08,/*"稍",1*/
};
const uint8_t rook_bitmap_hou[] PROGMEM = {
0x10,0x00,0x13,0xF8,0x10,0x08,0x28,0x08,
0x2F,0xFE,0x69,0x00,0x69,0x00,0xAB,0xF8,
0x2C,0x40,0x28,0x40,0x2F,0xFE,0x28,0x40,
0x28,0xA0,0x21,0x10,0x22,0x08,0x2C,0x06,/*"候",2*/
};
const uint8_t rook_bitmap_shengluehao[] PROGMEM = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"·",3*/
};
const uint8_t rook_bitmap_gong[] PROGMEM = {
0x00,0x40,0x00,0x40,0x00,0x40,0xFE,0x40,
0x11,0xFC,0x10,0x44,0x10,0x44,0x10,0x44,
0x10,0x44,0x10,0x84,0x10,0x84,0x1E,0x84,
0xF1,0x04,0x41,0x04,0x02,0x28,0x04,0x10,/*"功",1*/
};
const uint8_t rook_bitmap_cheng[] PROGMEM = {
0x00,0x50,0x00,0x48,0x00,0x40,0x3F,0xFE,
0x20,0x40,0x20,0x40,0x20,0x44,0x3E,0x44,
0x22,0x44,0x22,0x28,0x22,0x28,0x22,0x12,
0x2A,0x32,0x44,0x4A,0x40,0x86,0x81,0x02,/*"成",1*/
};
void draw1(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_lan);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_ya);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_lian);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_jie);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_zhong);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_douhao);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_qing);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_shao);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_hou);
}
void draw2(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_lan);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_ya);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_lian);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_jie);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_zhong);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_douhao);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_qing);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_shao);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_hou);
   u8g.drawBitmapP( 51, 34, 2, 16, rook_bitmap_shengluehao);
}
void draw3(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_lan);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_ya);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_lian);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_jie);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_zhong);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_douhao);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_qing);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_shao);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_hou);
   u8g.drawBitmapP( 51, 34, 2, 16, rook_bitmap_shengluehao);
   u8g.drawBitmapP( 68, 34, 2, 16, rook_bitmap_shengluehao);
}
void draw4(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_lan);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_ya);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_lian);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_jie);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_zhong);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_douhao);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_qing);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_shao);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_hou);
   u8g.drawBitmapP( 51, 34, 2, 16, rook_bitmap_shengluehao);
   u8g.drawBitmapP( 68, 34, 2, 16, rook_bitmap_shengluehao);
   u8g.drawBitmapP( 85, 34, 2, 16, rook_bitmap_shengluehao);
}
void draw5(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_lan);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_ya);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_lian);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_jie);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_cheng);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_gong);
}

const uint8_t rook_bitmap_an1[] PROGMEM = {
0x02,0x00,0x01,0x00,0x3F,0xFC,0x20,0x04,
0x42,0x08,0x02,0x00,0x02,0x00,0xFF,0xFE,
0x04,0x20,0x08,0x20,0x18,0x40,0x06,0x40,
0x01,0x80,0x02,0x60,0x0C,0x10,0x70,0x08,/*"安",0*/
};
const uint8_t rook_bitmap_zhuang[] PROGMEM = {
0x08,0x20,0x48,0x20,0x2B,0xFE,0x08,0x20,
0x18,0x20,0x28,0x20,0xC9,0xFC,0x0A,0x00,
0x01,0x00,0xFF,0xFE,0x05,0x00,0x0C,0x88,
0x34,0x50,0xC5,0x30,0x06,0x0E,0x04,0x00,/*"装",1*/
};
const uint8_t rook_bitmap_cai[] PROGMEM = {
0x00,0x10,0x00,0xF8,0x3F,0x00,0x02,0x00,
0x11,0x10,0x09,0x10,0x08,0x20,0x01,0x00,
0x7F,0xFC,0x03,0x80,0x05,0x40,0x09,0x20,
0x11,0x10,0x21,0x08,0xC1,0x06,0x01,0x00,/*"采",2*/
};
const uint8_t rook_bitmap_yang[] PROGMEM = {
0x11,0x04,0x10,0x84,0x10,0x88,0x10,0x00,
0xFB,0xFE,0x10,0x20,0x30,0x20,0x39,0xFC,
0x54,0x20,0x50,0x20,0x93,0xFE,0x10,0x20,
0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,/*"样",3*/
};
const uint8_t rook_bitmap_bang[] PROGMEM = {
0x10,0x20,0x10,0x20,0x13,0xFE,0x10,0x20,
0xFD,0xFC,0x10,0x40,0x33,0xFE,0x38,0x88,
0x55,0x24,0x52,0x22,0x90,0xF8,0x10,0x20,
0x13,0xFE,0x10,0x20,0x10,0x20,0x10,0x20,/*"棒",4*/
};
const uint8_t rook_bitmap_an4[] PROGMEM = {
0x10,0x40,0x10,0x20,0x10,0x20,0x13,0xFE,
0xFA,0x02,0x14,0x44,0x10,0x40,0x1B,0xFE,
0x30,0x88,0xD0,0x88,0x11,0x08,0x10,0xD0,
0x10,0x20,0x10,0x50,0x50,0x88,0x23,0x04,/*"按",7*/
};
const uint8_t rook_bitmap_1[] PROGMEM = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
0x03,0x80,0x00,0x80,0x00,0x80,0x00,0x80,
0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,
0x00,0x80,0x03,0xE0,0x00,0x00,0x00,0x00,/*"1",0*/
};
const uint8_t rook_bitmap_jian[] PROGMEM = {
0x20,0x10,0x20,0x10,0x3B,0x7C,0x21,0x14,
0x41,0xFE,0x7A,0x14,0xA2,0x7C,0x27,0x10,
0xF9,0x7C,0x25,0x10,0x25,0xFE,0x22,0x10,
0x2A,0x10,0x35,0x00,0x28,0xFE,0x00,0x00,/*"键",9*/
};

const uint8_t rook_bitmap_qing_1[] PROGMEM = {
0x82,0x00,0x5F,0xE0,0x02,0x00,0x0F,0xC0,
0xC2,0x00,0x5F,0xE0,0x48,0x40,0x4F,0xC0,
0x48,0x40,0x4F,0xC0,0x68,0x40,0x48,0xC0,/*"请",0*/
};
const uint8_t rook_bitmap_an4_1[] PROGMEM = {
0x21,0x00,0x20,0x80,0x27,0xE0,0xF4,0x20,
0x21,0x00,0x21,0x00,0x37,0xE0,0xE2,0x40,
0x22,0x40,0x21,0x80,0x22,0x40,0x6C,0x20,/*"按",1*/
};
const uint8_t rook_bitmap_fang_1[] PROGMEM = {
0x08,0x00,0x04,0x00,0xFF,0xE0,0x10,0x00,
0x10,0x00,0x1F,0xC0,0x10,0x40,0x10,0x40,
0x20,0x40,0x20,0x40,0x40,0x40,0x83,0x80,/*"方",0*/
};
const uint8_t rook_bitmap_xiang_1[] PROGMEM = {
0x08,0x00,0x10,0x00,0xFF,0xE0,0x80,0x20,
0x80,0x20,0x9F,0x20,0x91,0x20,0x91,0x20,
0x91,0x20,0x9F,0x20,0x80,0x20,0x80,0xE0,/*"向",1*/
};
const uint8_t rook_bitmap_jian_1[] PROGMEM = {
0x41,0x00,0x63,0xC0,0x99,0x40,0x0F,0xE0,
0xE9,0x40,0x53,0xC0,0x59,0x00,0xEF,0xC0,
0x49,0x00,0x5F,0xE0,0x69,0x00,0x57,0xE0,/*"键",6*/
};
const uint8_t rook_bitmap_douhao_1[] PROGMEM = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x00,
0x10,0x00,0x20,0x00,0x00,0x00,0x00,0x00,/*"，",7*/
};
const uint8_t rook_bitmap_que_1[] PROGMEM = {
0x02,0x00,0xF3,0xC0,0x24,0x40,0x20,0x80,
0x47,0xE0,0x75,0x20,0xD7,0xE0,0x55,0x20,
0x57,0xE0,0x75,0x20,0x55,0x20,0x08,0x60,/*"确",8*/
};
const uint8_t rook_bitmap_ren_1[] PROGMEM = {
0x41,0x00,0x21,0x00,0x01,0x00,0x01,0x00,
0xE1,0x00,0x21,0x00,0x22,0x80,0x22,0x80,
0x2A,0x80,0x34,0x40,0x24,0x40,0x08,0x20,/*"认",9*/
};
const uint8_t rook_bitmap_xi_1[] PROGMEM = {
0x03,0xC0,0x7C,0x00,0x08,0x00,0x10,0x80,
0x3F,0x00,0x06,0x00,0x18,0x40,0x7F,0xE0,
0x04,0x20,0x24,0x80,0x44,0x40,0x8C,0x20,/*"系",10*/
};
const uint8_t rook_bitmap_tong_1[] PROGMEM = {
0x21,0x00,0x20,0x80,0x47,0xE0,0x91,0x00,
0xE2,0x40,0x24,0x20,0x47,0xE0,0xF2,0xA0,
0x02,0x80,0x32,0x80,0xC4,0xA0,0x08,0x60,/*"统",11*/
};
const uint8_t rook_bitmap_zheng_1[] PROGMEM = {
0x00,0x00,0x7F,0xC0,0x04,0x00,0x04,0x00,
0x04,0x00,0x24,0x00,0x27,0xC0,0x24,0x00,
0x24,0x00,0x24,0x00,0x24,0x00,0xFF,0xE0,/*"正",12*/
};
const uint8_t rook_bitmap_chang_1[] PROGMEM = {
0x24,0x80,0x15,0x00,0xFF,0xE0,0x80,0x20,
0x3F,0x80,0x20,0x80,0x3F,0x80,0x04,0x00,
0x7F,0xC0,0x44,0x40,0x44,0xC0,0x04,0x00,/*"常",13*/
};
const uint8_t rook_bitmap_hou_1[] PROGMEM = {
0x01,0xC0,0x3E,0x00,0x20,0x00,0x20,0x00,
0x3F,0xE0,0x20,0x00,0x20,0x00,0x2F,0xE0,
0x28,0x20,0x48,0x20,0x4F,0xE0,0x88,0x20,/*"后",14*/
};
const uint8_t rook_bitmap_an1_1[] PROGMEM = {
0x08,0x00,0x04,0x00,0xFF,0xE0,0x88,0x20,
0x08,0x00,0xFF,0xE0,0x10,0x80,0x20,0x80,
0x39,0x00,0x06,0x00,0x19,0x80,0xE0,0x40,/*"安",0*/
};
const uint8_t rook_bitmap_zhuang_1[] PROGMEM = {
0x91,0x00,0x51,0x00,0x1F,0xE0,0x31,0x00,
0x51,0x00,0x97,0xC0,0x04,0x00,0xFF,0xE0,
0x0A,0x00,0x31,0x40,0xD4,0x80,0x18,0x60,/*"装",1*/
};
const uint8_t rook_bitmap_cai_1[] PROGMEM = {
0x03,0xC0,0x7C,0x00,0x08,0x00,0x44,0x40,
0x20,0x80,0x04,0x00,0xFF,0xE0,0x0E,0x00,
0x15,0x00,0x24,0x80,0xC4,0x60,0x04,0x00,/*"采",2*/
};
const uint8_t rook_bitmap_yang_1[] PROGMEM = {
0x24,0x40,0x22,0x80,0x2F,0xE0,0xF1,0x00,
0x21,0x00,0x67,0xC0,0x71,0x00,0xA1,0x00,
0x2F,0xE0,0x21,0x00,0x21,0x00,0x21,0x00,/*"样",3*/
};
const uint8_t rook_bitmap_bang_1[] PROGMEM = {
0x21,0x00,0x2F,0xE0,0x21,0x00,0xF7,0xC0,
0x22,0x00,0x6F,0xE0,0x74,0x40,0xA9,0x20,
0x27,0xC0,0x21,0x00,0x2F,0xE0,0x21,0x00,/*"棒",4*/
};
const uint8_t rook_bitmap_1_1[] PROGMEM = {
0x00,0x00,0x00,0x00,0x02,0x00,0x06,0x00,
0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,
0x02,0x00,0x07,0x00,0x00,0x00,0x00,0x00,/*"1",0*/
};
void draw6(void) {
   u8g.drawBitmapP( 0, 0, 2, 12, rook_bitmap_qing_1);
   u8g.drawBitmapP( 14, 0, 2, 12, rook_bitmap_an4_1);
   u8g.drawBitmapP( 28, 0, 2, 12, rook_bitmap_fang_1);
   u8g.drawBitmapP( 42, 0, 2, 12, rook_bitmap_xiang_1);
   u8g.drawBitmapP( 56, 0, 2, 12, rook_bitmap_jian_1);
   u8g.drawBitmapP( 70, 0, 2, 12, rook_bitmap_douhao_1);
   u8g.drawBitmapP( 0, 16, 2, 12, rook_bitmap_que_1);
   u8g.drawBitmapP( 14, 16, 2, 12, rook_bitmap_ren_1);
   u8g.drawBitmapP( 28, 16, 2, 12, rook_bitmap_xi_1);
   u8g.drawBitmapP( 42, 16, 2, 12, rook_bitmap_tong_1);
   u8g.drawBitmapP( 56, 16, 2, 12, rook_bitmap_zheng_1);
   u8g.drawBitmapP( 70, 16, 2, 12, rook_bitmap_chang_1);
   u8g.drawBitmapP( 84, 16, 2, 12, rook_bitmap_hou_1);
   u8g.drawBitmapP( 98, 16, 2, 12, rook_bitmap_douhao_1);
   u8g.drawBitmapP( 0, 32, 2, 12, rook_bitmap_an1_1);
   u8g.drawBitmapP( 14, 32, 2, 12, rook_bitmap_zhuang_1);
   u8g.drawBitmapP( 28, 32, 2, 12, rook_bitmap_cai_1);
   u8g.drawBitmapP( 42, 32, 2, 12, rook_bitmap_yang_1);
   u8g.drawBitmapP( 56, 32, 2, 12, rook_bitmap_bang_1);
   u8g.drawBitmapP( 70, 32, 2, 12, rook_bitmap_douhao_1);
   u8g.drawBitmapP( 0, 48, 2, 12, rook_bitmap_qing_1);
   u8g.drawBitmapP( 14, 48, 2, 12, rook_bitmap_an4_1);
   u8g.drawBitmapP( 28, 48, 2, 12, rook_bitmap_1_1);
   u8g.drawBitmapP( 42, 48, 2, 12, rook_bitmap_jian_1);
}
const uint8_t rook_bitmap_wan[] PROGMEM = {
0x02,0x00,0x01,0x00,0x7F,0xFE,0x40,0x02,
0x80,0x04,0x1F,0xF0,0x00,0x00,0x00,0x00,
0x7F,0xFC,0x04,0x40,0x04,0x40,0x04,0x40,
0x08,0x44,0x08,0x44,0x10,0x44,0x60,0x3C,/*"完",0*/
};
const uint8_t rook_bitmap_2[] PROGMEM = {
0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,
0x04,0x20,0x04,0x20,0x04,0x20,0x00,0x20,
0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,
0x04,0x20,0x07,0xE0,0x00,0x00,0x00,0x00,/*"2",0*/
};
void draw7(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_an1);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_zhuang);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_wan);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_cheng);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_douhao);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_qing);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_an4);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_2);
   u8g.drawBitmapP( 51, 34, 2, 16, rook_bitmap_jian);
}
const uint8_t rook_bitmap_zheng[] PROGMEM = {
0x00,0x00,0x7F,0xFC,0x01,0x00,0x01,0x00,
0x01,0x00,0x01,0x00,0x11,0x00,0x11,0xF8,
0x11,0x00,0x11,0x00,0x11,0x00,0x11,0x00,
0x11,0x00,0x11,0x00,0xFF,0xFE,0x00,0x00,/*"正",0*/
};
const uint8_t rook_bitmap_yi[] PROGMEM = {
0x08,0x20,0x1C,0x20,0xF0,0x7C,0x10,0x84,
0x11,0x48,0xFC,0x30,0x10,0x20,0x30,0x48,
0x39,0x90,0x54,0x3E,0x54,0x42,0x91,0xA4,
0x10,0x18,0x10,0x10,0x10,0x60,0x11,0x80,/*"移",1*/
};
const uint8_t rook_bitmap_dong[] PROGMEM = {
0x00,0x40,0x00,0x40,0x7C,0x40,0x00,0x40,
0x01,0xFC,0x00,0x44,0xFE,0x44,0x20,0x44,
0x20,0x44,0x20,0x84,0x48,0x84,0x44,0x84,
0xFD,0x04,0x45,0x04,0x02,0x28,0x04,0x10,/*"动",2*/
};
const uint8_t rook_bitmap_zhi[] PROGMEM = {
0x00,0x00,0x7F,0xFC,0x02,0x00,0x04,0x00,
0x08,0x20,0x10,0x10,0x3F,0xF8,0x00,0x08,
0x01,0x00,0x01,0x00,0x3F,0xF8,0x01,0x00,
0x01,0x00,0x01,0x00,0xFF,0xFE,0x00,0x00,/*"至",3*/
};
const uint8_t rook_bitmap_wei[] PROGMEM = {
0x08,0x80,0x08,0x40,0x08,0x40,0x10,0x00,
0x17,0xFC,0x30,0x00,0x30,0x08,0x52,0x08,
0x92,0x08,0x11,0x10,0x11,0x10,0x11,0x10,
0x11,0x20,0x10,0x20,0x1F,0xFE,0x10,0x00,/*"位",0*/
};
const uint8_t rook_bitmap_zhi2[] PROGMEM = {
0x7F,0xFC,0x44,0x44,0x7F,0xFC,0x01,0x00,
0x7F,0xFC,0x01,0x00,0x1F,0xF0,0x10,0x10,
0x1F,0xF0,0x10,0x10,0x1F,0xF0,0x10,0x10,
0x1F,0xF0,0x10,0x10,0xFF,0xFE,0x00,0x00,/*"置",1*/
};
void draw8(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_cai);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_yang);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_bang);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_zheng);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_yi);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_dong);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_zhi);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_cai);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_yang);
   u8g.drawBitmapP( 51, 34, 2, 16, rook_bitmap_wei);
   u8g.drawBitmapP( 68, 34, 2, 16, rook_bitmap_zhi2);
}
const uint8_t rook_bitmap_wei2[] PROGMEM = {
0x11,0x08,0x15,0x48,0x25,0x48,0x45,0x50,
0x97,0xDE,0x10,0x24,0x20,0x14,0x6F,0xD4,
0xA0,0x14,0x27,0x94,0x24,0x94,0x24,0xA8,
0x24,0xC8,0x24,0x94,0x28,0x14,0x30,0x22,/*"微",0*/
};
const uint8_t rook_bitmap_tiao[] PROGMEM = {
0x00,0x00,0x47,0xFC,0x24,0x44,0x24,0x44,
0x05,0xF4,0x04,0x44,0xE4,0x44,0x27,0xFC,
0x24,0x04,0x25,0xF4,0x25,0x14,0x2D,0x14,
0x35,0xF4,0x24,0x04,0x04,0x14,0x08,0x08,/*"调",1*/
};
const uint8_t rook_bitmap_kai[] PROGMEM = {
0x00,0x00,0x7F,0xFC,0x08,0x20,0x08,0x20,
0x08,0x20,0x08,0x20,0x08,0x20,0xFF,0xFE,
0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,
0x10,0x20,0x10,0x20,0x20,0x20,0x40,0x20,/*"开",0*/
};
const uint8_t rook_bitmap_shi[] PROGMEM = {
0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x40,
0xFC,0x48,0x24,0x84,0x25,0xFE,0x24,0x82,
0x24,0x00,0x48,0xFC,0x28,0x84,0x10,0x84,
0x28,0x84,0x44,0x84,0x80,0xFC,0x00,0x84,/*"始",1*/
};
void draw9(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_wei2);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_tiao);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_cai);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_yang);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_wei);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_zhi2);
   u8g.drawBitmapP( 102, 14, 2, 16, rook_bitmap_douhao);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_kai);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_shi);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_cai);
   u8g.drawBitmapP( 51, 34, 2, 16, rook_bitmap_yang);
}
const uint8_t rook_bitmap_jin[] PROGMEM = {
0x00,0x90,0x20,0x90,0x10,0x90,0x13,0xFC,
0x00,0x90,0x00,0x90,0xF0,0x90,0x17,0xFE,
0x10,0x90,0x10,0x90,0x11,0x10,0x11,0x10,
0x12,0x10,0x28,0x00,0x47,0xFE,0x00,0x00,/*"进",0*/
};
const uint8_t rook_bitmap_xing[] PROGMEM = {
0x08,0x00,0x09,0xFC,0x10,0x00,0x20,0x00,
0x48,0x00,0x08,0x00,0x13,0xFE,0x30,0x20,
0x50,0x20,0x90,0x20,0x10,0x20,0x10,0x20,
0x10,0x20,0x10,0x20,0x10,0xA0,0x10,0x40,/*"行",1*/
};
const uint8_t rook_bitmap_3[] PROGMEM = {
0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,
0x04,0x20,0x04,0x20,0x00,0x20,0x00,0x40,
0x01,0x80,0x00,0x40,0x00,0x20,0x04,0x20,
0x04,0x20,0x03,0xC0,0x00,0x00,0x00,0x00,/*"3",0*/
};
void draw12(void) {
   u8g.drawBitmapP( 0, 0, 2, 16, rook_bitmap_cai);
   u8g.drawBitmapP( 17, 0, 2, 16, rook_bitmap_yang);
   u8g.drawBitmapP( 34, 0, 2, 16, rook_bitmap_jin);
   u8g.drawBitmapP( 51, 0, 2, 16, rook_bitmap_xing);
   u8g.drawBitmapP( 68, 0, 2, 16, rook_bitmap_zhong);
   u8g.drawBitmapP( 85, 0, 2, 16, rook_bitmap_shengluehao);
   u8g.drawBitmapP( 102, 0, 2, 16, rook_bitmap_shengluehao);
   u8g.drawBitmapP( 0, 30, 2, 16, rook_bitmap_cai);
   u8g.drawBitmapP( 17, 30, 2, 16, rook_bitmap_yang);
   u8g.drawBitmapP( 34, 30, 2, 16, rook_bitmap_wan);
   u8g.drawBitmapP( 51, 30, 2, 16, rook_bitmap_cheng);
   u8g.drawBitmapP( 68, 30, 2, 16, rook_bitmap_douhao);
   u8g.drawBitmapP( 0, 48, 2, 16, rook_bitmap_qing);
   u8g.drawBitmapP( 17, 48, 2, 16, rook_bitmap_an4);
   u8g.drawBitmapP( 34, 48, 2, 16, rook_bitmap_3);
   u8g.drawBitmapP( 51, 48, 2, 16, rook_bitmap_jian);
}
const uint8_t rook_bitmap_quan[] PROGMEM = {
0x01,0x00,0x01,0x00,0x02,0x80,0x04,0x40,
0x08,0x20,0x10,0x10,0x2F,0xE8,0xC1,0x06,
0x01,0x00,0x01,0x00,0x1F,0xF0,0x01,0x00,
0x01,0x00,0x01,0x00,0x7F,0xFC,0x00,0x00,/*"全",0*/
};
void draw14(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_cai);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_yang);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_bang);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_zheng);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_yi);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_dong);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_zhi);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_an1);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_quan);
   u8g.drawBitmapP( 51, 34, 2, 16, rook_bitmap_wei);
   u8g.drawBitmapP( 68, 34, 2, 16, rook_bitmap_zhi2);
}
const uint8_t rook_bitmap_yi2[] PROGMEM = {
0x00,0x00,0x3F,0xF0,0x00,0x10,0x00,0x10,
0x00,0x10,0x20,0x10,0x20,0x10,0x3F,0xF0,
0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x04,
0x20,0x04,0x20,0x04,0x1F,0xFC,0x00,0x00,/*"已",0*/
};
const uint8_t rook_bitmap_dao[] PROGMEM = {
0x00,0x04,0xFF,0x84,0x08,0x04,0x10,0x24,
0x22,0x24,0x41,0x24,0xFF,0xA4,0x08,0xA4,
0x08,0x24,0x08,0x24,0x7F,0x24,0x08,0x24,
0x08,0x04,0x0F,0x84,0xF8,0x14,0x40,0x08,/*"到",0*/
};
const uint8_t rook_bitmap_da[] PROGMEM = {
0x00,0x40,0x20,0x40,0x10,0x40,0x10,0x40,
0x07,0xFE,0x00,0x40,0xF0,0x40,0x10,0xA0,
0x10,0x90,0x11,0x08,0x12,0x04,0x14,0x04,
0x10,0x00,0x28,0x00,0x47,0xFE,0x00,0x00,/*"达",1*/
};
const uint8_t rook_bitmap_huan[] PROGMEM = {
0x01,0x00,0x1F,0xF0,0x11,0x10,0x11,0x10,
0x1F,0xF0,0x01,0x00,0x3F,0xF8,0x21,0x08,
0x21,0x08,0x3F,0xF8,0x01,0x00,0x02,0x00,
0x51,0x04,0x51,0x12,0x90,0x12,0x0F,0xF0,/*"患",0*/
};
const uint8_t rook_bitmap_zhe[] PROGMEM = {
0x02,0x00,0x02,0x08,0x3F,0xD0,0x02,0x20,
0x02,0x40,0xFF,0xFE,0x01,0x00,0x02,0x00,
0x0F,0xF0,0x18,0x10,0x28,0x10,0x4F,0xF0,
0x88,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,/*"者",1*/
};
const uint8_t rook_bitmap_li[] PROGMEM = {
0x02,0x00,0x01,0x00,0xFF,0xFE,0x00,0x00,
0x14,0x50,0x13,0x90,0x14,0x50,0x1F,0xF0,
0x01,0x00,0x7F,0xFC,0x42,0x04,0x44,0x44,
0x4F,0xE4,0x44,0x24,0x40,0x14,0x40,0x08,/*"离",2*/
};
void draw15(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_dao);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_da);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_an1);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_quan);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_wei);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_zhi2);
   u8g.drawBitmapP( 102, 14, 2, 16, rook_bitmap_douhao);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_qing);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_huan);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_zhe);
   u8g.drawBitmapP( 51, 34, 2, 16, rook_bitmap_li);
   u8g.drawBitmapP( 68, 34, 2, 16, rook_bitmap_kai);
const uint8_t rook_bitmap_shou[] PROGMEM = {
0x08,0x40,0x08,0x40,0x48,0x40,0x48,0x80,
0x48,0xFE,0x49,0x08,0x4A,0x88,0x48,0x88,
0x48,0x88,0x58,0x50,0x68,0x50,0x48,0x20,
0x08,0x50,0x08,0x88,0x09,0x04,0x0A,0x02,/*"收",0*/
};
const uint8_t rook_bitmap_ji[] PROGMEM = {
0x09,0x00,0x08,0x80,0x1F,0xFC,0x30,0x80,
0x5F,0xF8,0x90,0x80,0x1F,0xF8,0x10,0x80,
0x1F,0xFC,0x11,0x00,0xFF,0xFE,0x05,0x40,
0x09,0x20,0x31,0x18,0xC1,0x06,0x01,0x00,/*"集",1*/
};
void draw16(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_cai);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_yang);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_bang);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_zheng);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_yi);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_dong);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_zhi);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_shou);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_ji);
   u8g.drawBitmapP( 51, 34, 2, 16, rook_bitmap_wei);
   u8g.drawBitmapP( 68, 34, 2, 16, rook_bitmap_zhi2);
}
const uint8_t rook_bitmap_fu[] PROGMEM = {
0x10,0x00,0x10,0x00,0x1F,0xFC,0x20,0x00,
0x5F,0xF0,0x90,0x10,0x1F,0xF0,0x10,0x10,
0x1F,0xF0,0x04,0x00,0x0F,0xF0,0x18,0x20,
0x64,0x40,0x03,0x80,0x1C,0x70,0xE0,0x0E,/*"复",0*/
};
const uint8_t rook_bitmap_4[] PROGMEM = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,
0x00,0xC0,0x00,0xC0,0x01,0x40,0x02,0x40,
0x02,0x40,0x04,0x40,0x07,0xF0,0x00,0x40,
0x00,0x40,0x01,0xF0,0x00,0x00,0x00,0x00,/*"4",0*/
};
void draw17(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_cai);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_yang);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_bang);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_fu);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_wei);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_douhao);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_qing);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_an4);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_4);
   u8g.drawBitmapP( 51, 34, 2, 16, rook_bitmap_jian);
}

const uint8_t rook_bitmap_xi[] PROGMEM = {
0x00,0xF8,0x3F,0x00,0x04,0x00,0x08,0x20,
0x10,0x40,0x3F,0x80,0x01,0x00,0x06,0x10,
0x18,0x08,0x7F,0xFC,0x01,0x04,0x09,0x20,
0x11,0x10,0x21,0x08,0x45,0x04,0x02,0x00,/*"系",0*/
};
const uint8_t rook_bitmap_tong[] PROGMEM = {
0x10,0x40,0x10,0x20,0x20,0x20,0x23,0xFE,
0x48,0x40,0xF8,0x88,0x11,0x04,0x23,0xFE,
0x40,0x92,0xF8,0x90,0x40,0x90,0x00,0x90,
0x19,0x12,0xE1,0x12,0x42,0x0E,0x04,0x00,/*"统",1*/
};
const uint8_t rook_bitmap_ting[] PROGMEM = {
0x10,0x80,0x10,0x40,0x17,0xFC,0x20,0x00,
0x23,0xF8,0x62,0x08,0x63,0xF8,0xA0,0x00,
0x2F,0xFE,0x28,0x02,0x23,0xF8,0x20,0x40,
0x20,0x40,0x20,0x40,0x21,0x40,0x20,0x80,/*"停",2*/
};
const uint8_t rook_bitmap_zhi3[] PROGMEM = {
0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,
0x11,0x00,0x11,0x00,0x11,0xF8,0x11,0x00,
0x11,0x00,0x11,0x00,0x11,0x00,0x11,0x00,
0x11,0x00,0x11,0x00,0xFF,0xFE,0x00,0x00,/*"止",3*/
};
const uint8_t rook_bitmap_yun[] PROGMEM = {
0x00,0x00,0x23,0xF8,0x10,0x00,0x10,0x00,
0x00,0x00,0x07,0xFC,0xF0,0x40,0x10,0x80,
0x11,0x10,0x12,0x08,0x17,0xFC,0x12,0x04,
0x10,0x00,0x28,0x00,0x47,0xFE,0x00,0x00,/*"运",4*/
};
const uint8_t rook_bitmap_qiang[] PROGMEM = {
0x00,0x00,0xF9,0xFC,0x09,0x04,0x09,0x04,
0x09,0xFC,0x78,0x20,0x40,0x20,0x43,0xFE,
0x42,0x22,0x7A,0x22,0x0B,0xFE,0x08,0x20,
0x08,0x24,0x08,0x22,0x57,0xFE,0x20,0x02,/*"强",7*/
};
const uint8_t rook_bitmap_zhi5[] PROGMEM = {
0x04,0x04,0x24,0x04,0x24,0x04,0x3F,0xA4,
0x44,0x24,0x04,0x24,0xFF,0xE4,0x04,0x24,
0x04,0x24,0x3F,0xA4,0x24,0xA4,0x24,0xA4,
0x26,0x84,0x25,0x04,0x04,0x14,0x04,0x08,/*"制",8*/
};
void draw18(void) {
   u8g.drawBitmapP( 0, 14, 2, 16, rook_bitmap_xi);
   u8g.drawBitmapP( 17, 14, 2, 16, rook_bitmap_tong);
   u8g.drawBitmapP( 34, 14, 2, 16, rook_bitmap_ting);
   u8g.drawBitmapP( 51, 14, 2, 16, rook_bitmap_zhi3);
   u8g.drawBitmapP( 68, 14, 2, 16, rook_bitmap_yun);
   u8g.drawBitmapP( 85, 14, 2, 16, rook_bitmap_xing);
   u8g.drawBitmapP( 102, 14, 2, 16, rook_bitmap_douhao);
   u8g.drawBitmapP( 0, 34, 2, 16, rook_bitmap_qing);
   u8g.drawBitmapP( 17, 34, 2, 16, rook_bitmap_an4);
   u8g.drawBitmapP( 34, 34, 2, 16, rook_bitmap_1);
   u8g.drawBitmapP( 51, 34, 2, 16, rook_bitmap_jian);
   u8g.drawBitmapP( 68, 34, 2, 16, rook_bitmap_fu);
   u8g.drawBitmapP( 85, 34, 2, 16, rook_bitmap_wei);
}
int redpin = 51;
int greenpin = 53;
int bluepin = 52;
int enablepin = 50;
/*  绿色：R:0,G:255,B:0
 *  黄色：R:255,G:255,B:0
 *  红色：R:255,G:0,B:0
 */
const int switch1 = 35;//emergency button

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  Serial1.begin(115200);
  Serial2.begin(115200);
  pinMode(redpin, OUTPUT);
  pinMode(bluepin, OUTPUT);
  pinMode(greenpin,OUTPUT);
  pinMode(enablepin,OUTPUT);
  pinMode(switch1, INPUT);
  digitalWrite(switch1,LOW);
  digitalWrite(enablepin,LOW);
  pinMode(2,INPUT);
  for(i=0;i<=5;i++)
  {
    u8g.firstPage();  
    do {
      draw1();
    } while( u8g.nextPage() );
    delay(1000);
    u8g.firstPage();  
    do {
      draw2();
    } while( u8g.nextPage() );
    delay(1000);
    u8g.firstPage();  
    do {
      draw3();
    } while( u8g.nextPage() );
    delay(1000);
    u8g.firstPage();  
    do {
      draw4();
    } while( u8g.nextPage() );
    delay(1000);
  }
  u8g.firstPage();  
  do {
    draw5();
  } while( u8g.nextPage() );
  delay(2000);
  u8g.firstPage();  
  do {
    draw6();
  } while( u8g.nextPage() );
}

void loop() {
  // put your main code here, to run repeatedly:
  /*if(digitalRead(2) == HIGH)
  {
    Serial.print("a");  
  }*/
  while(Serial1.available()>0){
  comchar = Serial1.read();
  Serial.println(comchar);
  delay(20); 
  }
  if(comchar == 'a')
  {
    u8g.firstPage();  
    do {
      draw7();
    } while( u8g.nextPage() );
    comchar = "";
  }
  if(comchar == 'b')
  {
    u8g.firstPage();  
    do {
      draw8();
    } while( u8g.nextPage() );
    comchar = "";
  }
  if(comchar == 'm')
  {  
    u8g.firstPage();  
    do {
      draw9();
    } while( u8g.nextPage() );
    delay(2000);
    digitalWrite(enablepin,HIGH);
    u8g.firstPage();  
    do {
      draw12();
    } while( u8g.nextPage() );
    comchar = "";
  }
  if(comchar == 'c')
  {
    u8g.firstPage();  
    do {
      draw14();
    } while( u8g.nextPage() );
    comchar = "";
  }
  if(comchar == 'd')
  {
    u8g.firstPage();  
    do {
      draw15();
    } while( u8g.nextPage() );
    delay(10000);
    u8g.firstPage();  
    do {
      draw6();
    } while( u8g.nextPage() );
    comchar = "";
  } 
  if(comchar == 'h')
  {
    u8g.firstPage();  
    do {
      draw18();
    } while( u8g.nextPage() );
    comchar = "";
  }
  if(comchar == 's')
  {
    analogWrite(redpin,(255-0));
    analogWrite(greenpin,(255-255));
    analogWrite(bluepin,(255-0)); 
  }
  if(comchar == 't')
  {
    analogWrite(redpin,(255-0));
    analogWrite(greenpin,(255-0));
    analogWrite(bluepin,(255-255)); 
  } 
  if(comchar == 'r')
  {
    analogWrite(redpin,(255-255));
    analogWrite(greenpin,(255-0));
    analogWrite(bluepin,(255-0)); 
  }
  if (digitalRead(switch1) == HIGH)
  {
    Serial.print("y");
    Serial2.print("y");
    delay(100);
  }
  if (digitalRead(switch1) == LOW)
  {
    Serial.print("z");
    Serial2.print("z");
    delay(100);
  }
}
